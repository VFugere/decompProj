anova(lm(dm~lu,data2))
anova(lm(dm~ha,data2))
corvif(data[,c('dmg','lu','ha','wks','wtr','lf.lu','lf.dmg','tree.dmg')])
f0 <- formula(rv ~ 1 + wks + wtr + dmg + ha + lu + lf.lu)
f1 <- update(f0, . ~ wks * .)
f2 <- update(f1, . ~ . + (wks|site) + (wks|leaf.origin/tree/leaf))
f0 <- formula(rv ~ 1 + wks + wtr + dmg + ha + lu + lf.lu+ dry.weight)
f1 <- update(f0, . ~ wks * .)
f2 <- update(f1, . ~ . + (wks|site) + (wks|leaf.origin/tree/leaf))
fx <- formula(rv ~ 1 + dmg + wtr + ha + lu + lf.lu + dry.weight)
fx <- update(fx, . ~ . + (1|site) + (1|leaf.origin/tree/leaf))
fm <- filter(data, mesh.type == 'fine')
cm <- filter(data, mesh.type == 'coarse')
#calculating k/day
summary(nls(exp.dec~100*(exp(1)^(-k*(weeks*7))),fm,start=list('k'= 0.01)))
summary(nls(exp.dec~100*(exp(1)^(-k*(weeks*7))),cm,start=list('k'= 0.01)))
summary(nls(exp.dec~100*(exp(1)^(-k*(weeks*7))),subset(cm, land.use == 'farm'),start=list('k'= 0.01)))
summary(nls(exp.dec~100*(exp(1)^(-k*(weeks*7))),subset(cm, land.use == 'forest'),start=list('k'= 0.01)))
ts.mod.fm <- glmmTMB(f2, fm, family=beta_family(link = "logit"))
summary(ts.mod.fm)
ts.mod.cm <- glmmTMB(f2, cm, family=beta_family(link = "logit"))
ts.mod.cm <- glmmTMB(f2, cm, family=beta_family(link = "logit"))
summary(ts.mod.cm)
fm.end <- filter(fm, weeks == 4)
cm.end <- filter(cm, weeks == 4)
t4.mod.fm <- glmmTMB(fx, fm.end, family=beta_family(link = "logit"))
summary(t4.mod.fm)
data$dry.weight <- rescale(data$dry.weight, c(0,1))
fm <- filter(data, mesh.type == 'fine')
cm <- filter(data, mesh.type == 'coarse')
ts.mod.fm <- glmmTMB(f2, fm, family=beta_family(link = "logit"))
summary(ts.mod.fm)
ts.mod.cm <- glmmTMB(f2, cm, family=beta_family(link = "logit"))
summary(ts.mod.cm)
fm.end <- filter(fm, weeks == 4)
cm.end <- filter(cm, weeks == 4)
t4.mod.fm <- glmmTMB(fx, fm.end, family=beta_family(link = "logit"))
summary(t4.mod.fm)
t4.mod.cm <- glmmTMB(fx, cm.end, family=beta_family(link = "logit"))
summary(t4.mod.cm)
summary(t4.mod.fm)
rm(list=ls())
library(tidyverse)
library(RColorBrewer)
library(glmmTMB)
library(magrittr)
library(plotrix)
library(party)
library(devtools)
source_url('https://raw.githubusercontent.com/VFugere/Rfuncs/master/vif.R')
source_url('https://raw.githubusercontent.com/VFugere/Rfuncs/master/utils.R')
cols <- brewer.pal(5, 'Dark2')
data <- read_csv('~/Google Drive/Recherche/PhD/manuscripts/caterpillar/decompProj/leafbags.csv') %>% filter(!is.na(rep.nb))
dmg <-  read_csv('~/Google Drive/Recherche/PhD/manuscripts/caterpillar/decompProj/caterpillar.csv') %>%
select(leaf.nb,damage.area)
data <- inner_join(data, dmg, by = 'leaf.nb') #loosing one replicate - the leaf fragment with a missing picture
rm(dmg)
#to conduct dmg analysis at whole-leaf or whole-tree level
data <- data %>% group_by(leaf) %>% mutate(avg.dmg = mean(damage.area)) %>% ungroup
data <- data %>% group_by(tree) %>% mutate(tree.avg.dmg = mean(damage.area)) %>% ungroup
data$leaf.lu <- 'forest'
data$leaf.lu[data$leaf.origin %in% c('miranga','bugembe')] <- 'farm'
data$leaf.lu <- as.factor(data$leaf.lu)
data$prop <- data$prct.mass.rem/100
data$prop.decomp <- 1-data$prop
#leaching un-adjusted for k calculation
data$exp.dec <- with(data, (AFDM.after / dry.weight)*100)
#transformation based on: https://stats.stackexchange.com/questions/31300/dealing-with-0-1-values-in-a-beta-regression
data$rv <- 1-(data$prop*(nrow(data)-1)+0.5) / nrow(data)
data$dmg <- rescale(data$damage.area, c(0,1))
data$lu <- as.factor(data$land.use)
data$lu <- relevel(data$lu, ref = 'forest')
data$ha <- as.factor(data$leaf.deployment)
data$ha <- relevel(data$ha, ref = 'home')
data$wks <- rescale(data$weeks, c(0,1))
data$wtr <- as.factor(data$watershed)
data$lf.lu <- relevel(data$leaf.lu, ref = 'forest')
data$lf.dmg <- rescale(data$avg.dmg, c(0,1))
data$tree.dmg <- rescale(data$tree.avg.dmg, c(0,1))
corvif(data[,c('dmg','lu','ha','wks','wtr','lf.lu','lf.dmg','tree.dmg')])
f0 <- formula(rv ~ 1 + wks + wtr + dmg + ha + lu + lf.lu)
f1 <- update(f0, . ~ wks * .)
f2 <- update(f1, . ~ . + (wks|site) + (wks|leaf.origin/tree/leaf))
fx <- formula(rv ~ 1 + dmg + wtr + ha + lu + lf.lu)
fx <- update(fx, . ~ . + (1|site) + (1|leaf.origin/tree/leaf))
data$mass.init <- rescale(data$leaching.adj.dry.weight, c(0,1))
fm <- filter(data, mesh.type == 'fine')
cm <- filter(data, mesh.type == 'coarse')
#calculating k/day
summary(nls(exp.dec~100*(exp(1)^(-k*(weeks*7))),fm,start=list('k'= 0.01)))
summary(nls(exp.dec~100*(exp(1)^(-k*(weeks*7))),cm,start=list('k'= 0.01)))
summary(nls(exp.dec~100*(exp(1)^(-k*(weeks*7))),subset(cm, land.use == 'farm'),start=list('k'= 0.01)))
summary(nls(exp.dec~100*(exp(1)^(-k*(weeks*7))),subset(cm, land.use == 'forest'),start=list('k'= 0.01)))
ts.mod.fm <- glmmTMB(f2, fm, family=beta_family(link = "logit"))
summary(ts.mod.fm)
fx <- formula(rv ~ 1 + dmg + wtr + ha + lu + lf.lu)
fx <- update(fx, . ~ . + (1|site) + (1|leaf.origin/tree/leaf))
fx
fm$leaf.origin
fx <- formula(rv ~ dmg + ha + lu + lf.lu + (1 | wtr/site) + (1 | leaf.origin/tree/leaf))
data$mass.init <- rescale(data$leaching.adj.dry.weight, c(0,1))
fm <- filter(data, mesh.type == 'fine')
cm <- filter(data, mesh.type == 'coarse')
#calculating k/day
summary(nls(exp.dec~100*(exp(1)^(-k*(weeks*7))),fm,start=list('k'= 0.01)))
summary(nls(exp.dec~100*(exp(1)^(-k*(weeks*7))),cm,start=list('k'= 0.01)))
summary(nls(exp.dec~100*(exp(1)^(-k*(weeks*7))),subset(cm, land.use == 'farm'),start=list('k'= 0.01)))
summary(nls(exp.dec~100*(exp(1)^(-k*(weeks*7))),subset(cm, land.use == 'forest'),start=list('k'= 0.01)))
fm.end <- filter(fm, weeks == 4)
cm.end <- filter(cm, weeks == 4)
t4.mod.fm <- glmmTMB(fx, fm.end, family=beta_family(link = "logit"))
summary(t4.mod.fm)
t4.mod.cm <- glmmTMB(fx, cm.end, family=beta_family(link = "logit"))
summary(t4.mod.cm)
fx <- formula(rv ~ dmg + ha + lu + lf.lu + (1 | wtr/site) + (1 | leaf.origin/tree/leaf))
t4.mod.fm <- glmmTMB(fx, fm.end, family=beta_family(link = "logit"))
summary(t4.mod.fm)
t4.mod.cm <- glmmTMB(fx, cm.end, family=beta_family(link = "logit"))
summary(t4.mod.cm)
library(brms)
?brm
getOption("mc.cores",
1L)
t4.mod.cm <- brm(fx, cm.end, family=beta_family(link = "logit"),cores=2)
t4.mod.cm <- brm(fx, cm.end, family=beta_family(link = "logit"),corezs=2)
t4.mod.cm <- brm(fx, cm.end)
y = 1:10
x = 11:20
brm(y~x)
dat <- data.frame(x,y)
dat
brm(y~x,dat)
install.packages("brms")
install.packages(c("bayesplot", "boot", "callr", "car", "carData", "caTools", "cli", "covr", "cubature", "curl", "data.table", "dendextend", "digest", "DT", "e1071", "fields", "foreign", "future", "globals", "haven", "Hmisc", "hms", "htmlTable", "huge", "igraph", "insight", "KernSmooth", "knitr", "listenv", "maptools", "Matrix", "MCMCpack", "mgcv", "multcomp", "MuMIn", "ncdf4", "network", "nlme", "openxlsx", "pals", "patchwork", "performance", "piecewiseSEM", "plotrix", "plyr", "quadprog", "quantreg", "R6", "randomcoloR", "Rcpp", "RcppArmadillo", "RcppEigen", "rgdal", "rlang", "rmarkdown", "RNeXML", "roxygen2", "rversions", "rvest", "scales", "segmented", "selectr", "skimr", "sna", "sp", "spam", "survival", "testthat", "tidyverse", "tinytex", "webshot", "writexl", "xfun"))
install.packages(c("bayesplot", "boot", "callr", "car", "carData", "caTools", "cli", "covr", "cubature", "curl", "data.table", "dendextend", "digest", "DT", "e1071", "fields", "foreign", "future", "globals", "haven", "Hmisc", "hms", "htmlTable", "huge", "igraph", "insight", "KernSmooth", "knitr", "listenv", "maptools", "Matrix", "MCMCpack", "mgcv", "multcomp", "MuMIn", "ncdf4", "network", "nlme", "openxlsx", "pals", "patchwork", "performance", "piecewiseSEM", "plotrix", "plyr", "quadprog", "quantreg", "R6", "randomcoloR", "Rcpp", "RcppArmadillo", "RcppEigen", "rgdal", "rlang", "rmarkdown", "RNeXML", "roxygen2", "rversions", "rvest", "scales", "segmented", "selectr", "skimr", "sna", "sp", "spam", "survival", "testthat", "tidyverse", "tinytex", "webshot", "writexl", "xfun"))
install.packages(c("bayesplot", "boot", "callr", "car", "carData", "caTools", "cli", "covr", "cubature", "curl", "data.table", "dendextend", "digest", "DT", "e1071", "fields", "foreign", "future", "globals", "haven", "Hmisc", "hms", "htmlTable", "huge", "igraph", "insight", "KernSmooth", "knitr", "listenv", "maptools", "Matrix", "MCMCpack", "mgcv", "multcomp", "MuMIn", "ncdf4", "network", "nlme", "openxlsx", "pals", "patchwork", "performance", "piecewiseSEM", "plotrix", "plyr", "quadprog", "quantreg", "R6", "randomcoloR", "Rcpp", "RcppArmadillo", "RcppEigen", "rgdal", "rlang", "rmarkdown", "RNeXML", "roxygen2", "rversions", "rvest", "scales", "segmented", "selectr", "skimr", "sna", "sp", "spam", "survival", "testthat", "tidyverse", "tinytex", "webshot", "writexl", "xfun"))
### Code for experimental project on drivers of decomposition in Kibale streams ###
### Vincent FugÃ¨re, 2019
rm(list=ls())
library(tidyverse)
library(RColorBrewer)
library(glmmTMB)
library(magrittr)
library(plotrix)
library(party)
library(devtools)
library(performance)
source_url('https://raw.githubusercontent.com/VFugere/Rfuncs/master/vif.R')
source_url('https://raw.githubusercontent.com/VFugere/Rfuncs/master/utils.R')
cols <- brewer.pal(5, 'Dark2')
#### load and format data ####
data <- read_csv('~/Google Drive/Recherche/PhD/manuscripts/caterpillar/decompProj/leafbags.csv') %>% filter(!is.na(rep.nb))
dmg <-  read_csv('~/Google Drive/Recherche/PhD/manuscripts/caterpillar/decompProj/caterpillar.csv') %>%
select(leaf.nb,damage.area)
data <- inner_join(data, dmg, by = 'leaf.nb') #loosing one replicate - the leaf fragment with a missing picture
rm(dmg)
#to conduct dmg analysis at whole-leaf or whole-tree level
data <- data %>% group_by(leaf) %>% mutate(avg.dmg = mean(damage.area)) %>% ungroup
data <- data %>% group_by(tree) %>% mutate(tree.avg.dmg = mean(damage.area)) %>% ungroup
data$leaf.lu <- 'forest'
data$leaf.lu[data$leaf.origin %in% c('miranga','bugembe')] <- 'farm'
data$leaf.lu <- as.factor(data$leaf.lu)
data$prop <- data$prct.mass.rem/100
data$prop.decomp <- 1-data$prop
#leaching un-adjusted for k calculation
data$exp.dec <- with(data, (AFDM.after / dry.weight)*100)
#transformation based on: https://stats.stackexchange.com/questions/31300/dealing-with-0-1-values-in-a-beta-regression
data$rv <- 1-(data$prop*(nrow(data)-1)+0.5) / nrow(data)
#1- because we want prop decomposed instead of prop left
data$dmg <- rescale(data$damage.area, c(0,1))
data$lu <- as.factor(data$land.use)
data$lu <- relevel(data$lu, ref = 'forest')
data$ha <- as.factor(data$leaf.deployment)
data$ha <- relevel(data$ha, ref = 'home')
data$wks <- rescale(data$weeks, c(0,1))
data$wtr <- as.factor(data$watershed)
data$lf.lu <- relevel(data$leaf.lu, ref = 'forest')
data$lf.dmg <- rescale(data$avg.dmg, c(0,1))
data$tree.dmg <- rescale(data$tree.avg.dmg, c(0,1))
#### is leaf mass different among treatments? ####
#data$dm <- data$dry.weight
#
# mean(data$dm)
# sd(data$dm)
# sd(data$dm)/sqrt(nrow(data)) #se
# range(data$dm)
#
# anova(lm(dm~lu,data))
# anova(lm(dm~ha,data))
# summary(lm(dm~dmg,data))
# plot(dm~dmg,data)
# #relationship driven by high-leverage outlier
# data2 <- data[data$dmg < 0.95,]
# anova(lm(dm~lu,data2))
# anova(lm(dm~ha,data2))
# summary(lm(dm~dmg,data2))
#### setting up models ####
#collinearity
corvif(data[,c('dmg','lu','ha','wks','wtr','lf.lu','lf.dmg','tree.dmg')])
#fragment damage and leaf total damage are obviously correlated
#also correlated with tree damage, and leaf land use
#will test separately. No dmg var has an effect; chose fragment damage in final models because cleaner
#model with time
f0 <- formula(rv ~ 1 + wks + wtr + dmg + ha + lu + lf.lu)
f1 <- update(f0, . ~ wks * .)
f2 <- update(f1, . ~ . + (wks|site) + (wks|leaf.origin/tree/leaf))
#model with final time point only
fx <- formula(rv ~ 1 + dmg + wtr + ha + lu + lf.lu)
fx <- update(fx, . ~ . + (1|site) + (1|leaf.origin/tree/leaf))
#### models ####
data$mass.init <- rescale(data$leaching.adj.dry.weight, c(0,1))
fm <- filter(data, mesh.type == 'fine')
cm <- filter(data, mesh.type == 'coarse')
#calculating k/day
summary(nls(exp.dec~100*(exp(1)^(-k*(weeks*7))),fm,start=list('k'= 0.01)))
summary(nls(exp.dec~100*(exp(1)^(-k*(weeks*7))),cm,start=list('k'= 0.01)))
summary(nls(exp.dec~100*(exp(1)^(-k*(weeks*7))),subset(cm, land.use == 'farm'),start=list('k'= 0.01)))
summary(nls(exp.dec~100*(exp(1)^(-k*(weeks*7))),subset(cm, land.use == 'forest'),start=list('k'= 0.01)))
ts.mod.fm <- glmmTMB(f2, fm, family=beta_family(link = "logit"))
summary(ts.mod.fm)
ts.mod.cm <- glmmTMB(f2, cm, family=beta_family(link = "logit"))
summary(ts.mod.cm)
# #saving model results for Table 1
# rownames_to_column(as.data.frame(summary(ts.mod.fm)$coefficients[1])) %>% write_csv(., '~/Desktop/fmmod.csv')
# rownames_to_column(as.data.frame(summary(ts.mod.cm)$coefficients[1])) %>% write_csv(., '~/Desktop/cmmod.csv')
# #interaction model
# f3 <- formula(rv ~ wks + dmg + ha + lu + (wks | site) + (wks | leaf.origin/tree/leaf) +
#                 wks:dmg + wks:ha + wks:lu + dmg:ha + dmg:lu + ha:lu +
#                 dmg:ha:wks + dmg:lu:wks + ha:lu:wks)
# summary(glmmTMB(f3, fm, family=beta_family(link = "logit"))) #no higher-order interactions
# summary(glmmTMB(f3, cm, family=beta_family(link = "logit")))
# #does not converge, going Bayesian
# library(brms)
# m1 <- brm(f3, cm, family=beta_family(link = "logit"))
# summary(m1)
# plot(m1)
# #no higher-order interactions
fm.end <- filter(fm, weeks == 4)
cm.end <- filter(cm, weeks == 4)
# #regression trees
# fit.fm <- ctree(rv ~ dmg+lu+ha+wks+wtr+leaf.lu+lf.lu, data = fm.end, controls = ctree_control(minsplit = 1, testtype = 'MonteCarlo'))
# plot(fit.fm, inner_panel=node_inner(fit.fm,pval = T),
#      terminal_panel=node_boxplot(fit.fm, width=0.4,fill='white',ylines=3,id=F))
# fit.cm <- ctree(rv ~ dmg+lu+ha+wks+wtr+leaf.lu+lf.lu, data = cm.end, controls = ctree_control(minsplit = 1, testtype = 'MonteCarlo'))
# plot(fit.cm, inner_panel=node_inner(fit.cm,pval = T),
#      terminal_panel=node_boxplot(fit.cm, width=0.4,fill='white',ylines=3,id=F))
# #the only thing that matters is land use for CM bags
t4.mod.fm <- glmmTMB(fx, fm.end, family=beta_family(link = "logit"))
summary(t4.mod.fm)
# #removing site random effect and treating as fixed effect
# fx2 <- formula(rv ~ 1 + dmg + wtr + ha + lu + lf.lu)
# fx2 <- update(fx2, . ~ . + (1|leaf.origin/tree/leaf))
# t4.mod.fm2 <- glmmTMB(fx2, fm.end, family=beta_family(link = "logit"))
# summary(t4.mod.fm2)
# #effect of land use only significant in one watershed
#
# plot(fitted(t4.mod.fm)~fm.end$rv, pch=16, col=fm.end$site_f)
# plot(fitted(t4.mod.fm2)~fm.end$rv, pch=16, col=fm.end$site_f)
# #fit is identical
t4.mod.cm <- glmmTMB(fx, cm.end, family=beta_family(link = "logit"))
summary(t4.mod.cm)
fm$prop.decomp <- fm$prop.decomp*100
cm$prop.decomp <- cm$prop.decomp*100
# #interaction models with factors of interest (not enough data to add all factors)
# fx.i <- formula(rv ~ dmg + ha + lu + (1 | site) + (1 | leaf.origin/tree/leaf) +
#                   dmg:ha + dmg:lu + ha:lu)
# summary(glmmTMB(fx.i, fm.end, family=beta_family(link = "logit")))
# summary(glmmTMB(fx.i, cm.end, family=beta_family(link = "logit")))
# #convergence problems again
# m1 <- brm(fx.i, cm.end, family=beta_family(link = "logit"),iter=4000,thin=2)
# summary(m1)
# plot(m1)
# #no significant two-way interactions
# # effect of starting AFDM on decomp
#
# summary(lm(rv~mass.init*weeks,fm))
# summary(lm(rv~mass.init*weeks,cm))
# summary(lm(rv~mass.init,fm.end))
# summary(lm(rv~mass.init,cm.end))
#
# pdf('~/Desktop/FigS1.pdf',width=5.5,height = 2.8,pointsize = 8)
# par(mfrow=c(1,2),cex=1)
# plot(rv~mass.init,fm.end,xlab = 'initial mass', ylab = 'proportion decomposed',bty='l')
# title(main='fine mesh',cex=1)
# plot(rv~mass.init,cm.end,xlab = 'initial mass', ylab = 'proportion decomposed',bty='l')
# title(main='coarse mesh',cex=1)
# dev.off()
# par(mfrow=c(1,1))
### wtrshed as random effect as asked by Editor, remove leaf land use
f0 <- formula(rv ~ 1 + wks + dmg + ha + lu)
f1 <- update(f0, . ~ wks * .)
f2 <- update(f1, . ~ . + (1|watershed/site) + (1|leaf.origin/tree/leaf))
ts.mod.fm <- glmmTMB(f2, fm, family=beta_family(link = "logit"))
summary(ts.mod.fm)
ts.mod.cm <- glmmTMB(f2, cm, family=beta_family(link = "logit"))
summary(ts.mod.cm)
#saving model results for Table 1
rownames_to_column(as.data.frame(summary(ts.mod.fm)$coefficients[1])) %>%
bind_rows(rownames_to_column(as.data.frame(summary(ts.mod.cm)$coefficients[1]))) %>%
write_csv(., '~/Desktop/tsmod.csv')
fx<- formula(rv ~ dmg + ha + lu + (1 | wtr/site) + (1 | leaf.origin/tree/leaf))
t4.mod.fm <- glmmTMB(fx, fm.end, family=beta_family(link = "logit"))
summary(t4.mod.fm)
t4.mod.cm <- glmmTMB(fx, cm.end, family=beta_family(link = "logit"))
summary(t4.mod.cm)
plot(resid(t4.mod.cm)~fitted(t4.mod.cm))
plot(fitted(t4.mod.cm) ~ cm.end$rv)
#### Figure 3 ####
pdf('~/Desktop/Fig3.pdf',width=3,height = 2.5,pointsize = 8)
par(mfrow=c(1,1),mar=c(4,7,1,1),cex=1)
plot(0,type='n',yaxt='n',xaxt='n',cex.axis=1,ann=F,bty='l',xlim=c(-6,2),ylim=c(0.5,6.5))
#axis(2,cex.axis=1,lwd=0,lwd.ticks=0,at=1:5,labels = rev(c('farm vs. forest','away vs. home','leaf damage','leaf land use','watershed')),las=1)
axis(2,cex.axis=1,lwd=0,lwd.ticks=0,at=1:6,labels = rev(c('farm vs. forest','away vs. home','leaf damage','farm vs. forest','away vs. home','leaf damage')),las=1)
abline(v=0,lty=2,lwd=1)
abline(h=3.5,lty=1,lwd=1)
axis(2,cex.axis=1,lwd=0,lwd.ticks=1,at=3.5,labels = '')
title(xlab='parameter estimate')
axis(1,cex.axis=1,lwd=0,lwd.ticks=1)
#getting coefs: fm
coefs <- rownames_to_column(as.data.frame(summary(t4.mod.fm)$coefficients[1])) %>%
rename(coef = rowname, value = cond.Estimate, se = cond.Std..Error) %>% select(coef:se) %>%
filter(coef != '(Intercept)')
coefs %<>% mutate('lwr' = value-1.96*se, 'upr' = value+1.96*se)
#coefs <- coefs[c(2,5,1,3,4),]
for(w in 4:6){
pt <- coefs[w-3,'value']
lwr <- coefs[w-3,'lwr']
upr <- coefs[w-3,'upr']
if(0 < upr & 0 > lwr){
alph <- 0.3
} else {
alph <- 1
}
segments(x0=lwr,x1=upr,y0=w,y1=w,col=alpha(cols[w-3],alph),lwd=3)
points(x=pt,y=w,pch=16,col=alpha(cols[w-3],alph),cex=2)
}
legend('topleft',bty='n',legend=expression(italic('fine-mesh')))
#getting coefs: cm
coefs <- rownames_to_column(as.data.frame(summary(t4.mod.cm)$coefficients[1])) %>%
rename(coef = rowname, value = cond.Estimate, se = cond.Std..Error) %>% select(coef:se) %>%
filter(coef != '(Intercept)')
coefs %<>% mutate('lwr' = value-1.96*se, 'upr' = value+1.96*se)
for(w in 1:3){
pt <- coefs[w,'value']
lwr <- coefs[w,'lwr']
upr <- coefs[w,'upr']
if(0 < upr & 0 > lwr){
alph <- 0.3
} else {
alph <- 1
}
segments(x0=lwr,x1=upr,y0=w,y1=w,col=alpha(cols[w],alph),lwd=3)
points(x=pt,y=w,pch=16,col=alpha(cols[w],alph),cex=2)
}
legend('bottomleft',bty='n',legend=expression(italic('coarse-mesh')))
dev.off()
#### Figure 3 ####
pdf('~/Desktop/Fig3.pdf',width=3,height = 2.5,pointsize = 8)
par(mfrow=c(1,1),mar=c(4,7,1,1),cex=1)
plot(0,type='n',yaxt='n',xaxt='n',cex.axis=1,ann=F,bty='l',xlim=c(-6,2),ylim=c(0.5,6.5))
#axis(2,cex.axis=1,lwd=0,lwd.ticks=0,at=1:5,labels = rev(c('farm vs. forest','away vs. home','leaf damage','leaf land use','watershed')),las=1)
axis(2,cex.axis=1,lwd=0,lwd.ticks=0,at=1:6,labels = rev(c('farm vs. forest','away vs. home','leaf damage','farm vs. forest','away vs. home','leaf damage')),las=1)
abline(v=0,lty=2,lwd=1)
abline(h=3.5,lty=1,lwd=1)
axis(2,cex.axis=1,lwd=0,lwd.ticks=1,at=3.5,labels = '')
title(xlab='parameter estimate')
axis(1,cex.axis=1,lwd=0,lwd.ticks=1)
#getting coefs: fm
coefs <- rownames_to_column(as.data.frame(summary(t4.mod.fm)$coefficients[1])) %>%
rename(coef = rowname, value = cond.Estimate, se = cond.Std..Error) %>% select(coef:se) %>%
filter(coef != '(Intercept)')
coefs %<>% mutate('lwr' = value-1.96*se, 'upr' = value+1.96*se)
#coefs <- coefs[c(2,5,1,3,4),]
for(w in 4:6){
pt <- coefs[w-3,'value']
lwr <- coefs[w-3,'lwr']
upr <- coefs[w-3,'upr']
if(0 < upr & 0 > lwr){
alph <- 0.3
} else {
alph <- 1
}
segments(x0=lwr,x1=upr,y0=w,y1=w,col=alpha(rev(cols)[w-3],alph),lwd=3)
points(x=pt,y=w,pch=16,col=alpha(rev(cols)[w-3],alph),cex=2)
}
legend('topleft',bty='n',legend=expression(italic('fine-mesh')))
#getting coefs: cm
coefs <- rownames_to_column(as.data.frame(summary(t4.mod.cm)$coefficients[1])) %>%
rename(coef = rowname, value = cond.Estimate, se = cond.Std..Error) %>% select(coef:se) %>%
filter(coef != '(Intercept)')
coefs %<>% mutate('lwr' = value-1.96*se, 'upr' = value+1.96*se)
for(w in 1:3){
pt <- coefs[w,'value']
lwr <- coefs[w,'lwr']
upr <- coefs[w,'upr']
if(0 < upr & 0 > lwr){
alph <- 0.3
} else {
alph <- 1
}
segments(x0=lwr,x1=upr,y0=w,y1=w,col=alpha(rev(cols[w]),alph),lwd=3)
points(x=pt,y=w,pch=16,col=alpha(rev(cols[w]),alph),cex=2)
}
legend('bottomleft',bty='n',legend=expression(italic('coarse-mesh')))
dev.off()
cols
cols <- brewer.pal(3, 'Dark2')
par(mfrow=c(1,1),mar=c(4,7,1,1),cex=1)
plot(0,type='n',yaxt='n',xaxt='n',cex.axis=1,ann=F,bty='l',xlim=c(-6,2),ylim=c(0.5,6.5))
#axis(2,cex.axis=1,lwd=0,lwd.ticks=0,at=1:5,labels = rev(c('farm vs. forest','away vs. home','leaf damage','leaf land use','watershed')),las=1)
axis(2,cex.axis=1,lwd=0,lwd.ticks=0,at=1:6,labels = rev(c('farm vs. forest','away vs. home','leaf damage','farm vs. forest','away vs. home','leaf damage')),las=1)
abline(v=0,lty=2,lwd=1)
abline(h=3.5,lty=1,lwd=1)
axis(2,cex.axis=1,lwd=0,lwd.ticks=1,at=3.5,labels = '')
title(xlab='parameter estimate')
axis(1,cex.axis=1,lwd=0,lwd.ticks=1)
#getting coefs: fm
coefs <- rownames_to_column(as.data.frame(summary(t4.mod.fm)$coefficients[1])) %>%
rename(coef = rowname, value = cond.Estimate, se = cond.Std..Error) %>% select(coef:se) %>%
filter(coef != '(Intercept)')
coefs %<>% mutate('lwr' = value-1.96*se, 'upr' = value+1.96*se)
for(w in 4:6){
pt <- coefs[w-3,'value']
lwr <- coefs[w-3,'lwr']
upr <- coefs[w-3,'upr']
if(0 < upr & 0 > lwr){
alph <- 0.3
} else {
alph <- 1
}
segments(x0=lwr,x1=upr,y0=w,y1=w,col=alpha(rev(cols)[w-3],alph),lwd=3)
points(x=pt,y=w,pch=16,col=alpha(rev(cols)[w-3],alph),cex=2)
}
legend('topleft',bty='n',legend=expression(italic('fine-mesh')))
#getting coefs: cm
coefs <- rownames_to_column(as.data.frame(summary(t4.mod.cm)$coefficients[1])) %>%
rename(coef = rowname, value = cond.Estimate, se = cond.Std..Error) %>% select(coef:se) %>%
filter(coef != '(Intercept)')
coefs %<>% mutate('lwr' = value-1.96*se, 'upr' = value+1.96*se)
for(w in 1:3){
pt <- coefs[w,'value']
lwr <- coefs[w,'lwr']
upr <- coefs[w,'upr']
if(0 < upr & 0 > lwr){
alph <- 0.3
} else {
alph <- 1
}
segments(x0=lwr,x1=upr,y0=w,y1=w,col=alpha(rev(cols[w]),alph),lwd=3)
points(x=pt,y=w,pch=16,col=alpha(rev(cols[w]),alph),cex=2)
}
#getting coefs: fm
coefs <- rownames_to_column(as.data.frame(summary(t4.mod.fm)$coefficients[1])) %>%
rename(coef = rowname, value = cond.Estimate, se = cond.Std..Error) %>% select(coef:se) %>%
filter(coef != '(Intercept)')
coefs %<>% mutate('lwr' = value-1.96*se, 'upr' = value+1.96*se)
coefs
#getting coefs: cm
coefs <- rownames_to_column(as.data.frame(summary(t4.mod.cm)$coefficients[1])) %>%
rename(coef = rowname, value = cond.Estimate, se = cond.Std..Error) %>% select(coef:se) %>%
filter(coef != '(Intercept)')
coefs %<>% mutate('lwr' = value-1.96*se, 'upr' = value+1.96*se)
coefs
#### Figure 3 ####
pdf('~/Desktop/Fig3.pdf',width=3,height = 2.5,pointsize = 8)
par(mfrow=c(1,1),mar=c(4,7,1,1),cex=1)
plot(0,type='n',yaxt='n',xaxt='n',cex.axis=1,ann=F,bty='l',xlim=c(-6,2),ylim=c(0.5,6.5))
#axis(2,cex.axis=1,lwd=0,lwd.ticks=0,at=1:5,labels = rev(c('farm vs. forest','away vs. home','leaf damage','leaf land use','watershed')),las=1)
axis(2,cex.axis=1,lwd=0,lwd.ticks=0,at=1:6,labels = rev(c('farm vs. forest','away vs. home','leaf damage','farm vs. forest','away vs. home','leaf damage')),las=1)
abline(v=0,lty=2,lwd=1)
abline(h=3.5,lty=1,lwd=1)
axis(2,cex.axis=1,lwd=0,lwd.ticks=1,at=3.5,labels = '')
title(xlab='parameter estimate')
axis(1,cex.axis=1,lwd=0,lwd.ticks=1)
#getting coefs: fm
coefs <- rownames_to_column(as.data.frame(summary(t4.mod.fm)$coefficients[1])) %>%
rename(coef = rowname, value = cond.Estimate, se = cond.Std..Error) %>% select(coef:se) %>%
filter(coef != '(Intercept)')
coefs %<>% mutate('lwr' = value-1.96*se, 'upr' = value+1.96*se)
#coefs <- coefs[c(2,5,1,3,4),]
for(w in 4:6){
pt <- coefs[w-3,'value']
lwr <- coefs[w-3,'lwr']
upr <- coefs[w-3,'upr']
if(0 < upr & 0 > lwr){
alph <- 0.3
} else {
alph <- 1
}
segments(x0=lwr,x1=upr,y0=w,y1=w,col=alpha(rev(cols)[w-3],alph),lwd=3)
points(x=pt,y=w,pch=16,col=alpha(rev(cols)[w-3],alph),cex=2)
}
legend('topleft',bty='n',legend=expression(italic('fine-mesh')))
#getting coefs: cm
coefs <- rownames_to_column(as.data.frame(summary(t4.mod.cm)$coefficients[1])) %>%
rename(coef = rowname, value = cond.Estimate, se = cond.Std..Error) %>% select(coef:se) %>%
filter(coef != '(Intercept)')
coefs %<>% mutate('lwr' = value-1.96*se, 'upr' = value+1.96*se)
for(w in 1:3){
pt <- coefs[w,'value']
lwr <- coefs[w,'lwr']
upr <- coefs[w,'upr']
if(0 < upr & 0 > lwr){
alph <- 0.3
} else {
alph <- 1
}
segments(x0=lwr,x1=upr,y0=w,y1=w,col=alpha(rev(cols)[w],alph),lwd=3)
points(x=pt,y=w,pch=16,col=alpha(rev(cols)[w],alph),cex=2)
}
legend('bottomleft',bty='n',legend=expression(italic('coarse-mesh')))
dev.off()
